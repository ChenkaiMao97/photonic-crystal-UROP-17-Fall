function outtable = MEEPloadTable(filename, nref, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [VARNAME1,ASYM2DMPH,VARNAME3,VARNAME4,VARNAME5,VARNAME6,VARNAME7,VARNAME8,VARNAME9,VARNAME10,VARNAME11,VARNAME12,VARNAME13,VARNAME14,VARNAME15,VARNAME16,VARNAME17,VARNAME18,VARNAME19]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [VARNAME1,ASYM2DMPH,VARNAME3,VARNAME4,VARNAME5,VARNAME6,VARNAME7,VARNAME8,VARNAME9,VARNAME10,VARNAME11,VARNAME12,VARNAME13,VARNAME14,VARNAME15,VARNAME16,VARNAME17,VARNAME18,VARNAME19]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [VarName1,asym2dmph,VarName3,VarName4,VarName5,VarName6,VarName7,VarName8,VarName9,VarName10,VarName11,VarName12,VarName13,VarName14,VarName15,VarName16,VarName17,VarName18,VarName19]
%   = importfile('test1.csv',6, 665);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/09/23 19:57:51
% npar: number of additional parameters that we scanned across

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format string for each line of text:
% For more information, see the TEXTSCAN documentation.
% First 6 columns of harminv results
% In order: 1. kx, 2. ky, 3. extraparam, 4. modenum, 5. fcen, 6. 1/df, 7.
% int|E|, 8. int|E| central, 9. total size, 10. central size, 11. total Ex,
% 12. total Ey, 13. total Ez, 14. nref, 15. refst, 16. refend
% Loop nref+1 times:
% top plane Ex, Ey, Ez, bot plane Ex, Ey, Ez, top flux, bot flux
% After loop: plane size
formatSpec = '';
for i = 1:6
    formatSpec = strcat(formatSpec,'%s');   % incorporate harminv results
end
for i = 1:16
    formatSpec = strcat(formatSpec,'%f');
end
for i = 1:nref+1
    for j = 1:8
        formatSpec = strcat(formatSpec,'%s');
    end
end
formatSpec = strcat(formatSpec,'%f%[^\n\r]');

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
harminvArray = dataArray(1:6);
dataArray = dataArray(7:end);
VarName1 = dataArray{:,1};
outtable = zeros(length(VarName1),17+8+8*nref);   %#ok<*NASGU>
harminvtable = zeros(length(VarName1),6);
for i = 1:16
    outtable(:,i) = dataArray{:,i};
end
for j = 1:nref+1
    for i = 1:8
        tempvar = dataArray{:,16+i+8*(j-1)};
        for k = 1:length(VarName1)
            outtable(k,16+i+8*(j-1)) = str2num(tempvar{k});
            % convert into complex number
        end
    end
end
outtable(:,end) = dataArray{:,17+8+8*nref};
for i = 1:6
    for j = 1:length(VarName1)
        harminvtable(j,i) = str2num(harminvArray{:,i}{j});
    end
end
outtable = horzcat(outtable,harminvtable);
outtable = outtable(abs(outtable(:,5)-harminvtable(:,1))<0.005,:);  % ensure that we are indeed looking at the same mode
outtable(:,5) = harminvtable(:,1);
outtable(:,6) = harminvtable(:,3);
temp = outtable(:,3);    % shuffle into a format that is more similar to before
outtable(:,3:15) = outtable(:,4:16);
outtable(:,16) = temp;
if nref ~= outtable(1,13)  % check if consistent
    print('Size Error!')
    outtable = [];
end

